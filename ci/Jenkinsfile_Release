@Library('devops-jenkins-lib') _
def appVersion = ''
gitCredentialsId = 'e4729b13-caae-4669-972f-5307ae6309f4'
awsCredentialsId = 'dab6216e-af1e-45e8-b957-58796cc47fa2'
appGitUrl = 'https://ci_reporty@bitbucket.org/reportydev/wgwservice.git'
imageName = 'wgw_service'

pipeline {
    options {
        timestamps()
        disableConcurrentBuilds()
   	    skipDefaultCheckout()	
        timeout(time: 3, unit: 'HOURS')
    }
    agent {
        kubernetes {
            cloud 'jenkins'
            yamlFile 'ci/pod.yaml'
        }
    }
	triggers {
       pollSCM('H/3 * * * *') // every 3 mins
    }
    parameters {
        string(name: 'GIT_BRANCH', defaultValue: 'release/XXX', description: 'Name of the SCM branch')
        string(name: 'Stack', defaultValue: 'qa', description: 'Name of the Stack')
    }
    environment {
        AWS_DEFAULT_REGION = 'eu-central-1'
        SERVICE_NAME = 'WGWService'
        STACK = 'qa'
        CODE_DEPLOY_STACK = 'QA'
    }
    stages {
	    stage ('Checkout Code') {
            steps {
            echo 'checkout Code'
            checkout([$class: 'GitSCM', branches: [[name: '*/origin/$GIT_BRANCH']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CloneOption', noTags: false, reference: '', shallow: false, timeout: 10], [$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: true, recursiveSubmodules: true, reference: '', trackingSubmodules: false]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'e4729b13-caae-4669-972f-5307ae6309f4', url: 'https://github.com/carbyne911/WGWService.git']]])
            }
            
        }
        stage('Parsing WGW Build Version') {
            steps {
                script {
                    def file = "${WORKSPACE}/ci/deployment/scripts/deploy-scripts/wgw_version"
                    appVersion = readFile(file)
                    println(appVersion)

                }
            }
        }
        stage('Deploy image to ECR') {
            steps {
                script {
                    utils.buildDockerImageRealTime(
                            ecrRepo: '366789379256.dkr.ecr.eu-west-1.amazonaws.com',
                            gitBranch:"${GIT_BRANCH}",
                            imageName:"${imageName}_qa",
                            imageNameVer: "${imageName}_qa:$appVersion",
                            imageNameLatest: "${imageName}_qa:latest",
                            dockerCredentialsId: 'ecr:eu-west-1:dab6216e-af1e-45e8-b957-58796cc47fa2',
                            

                    )
                }
            }
        }
        stage('AWS-CodeDeploy-Ireland') {
            steps {
                script {
                    utils.awsCodeDeployWGW(
                            credentialsId: awsCredentialsId,
                    )
               }
            }
        }
        
    }
    post {
        always {
            script {
                manager.addShortText(manager.build.causes.collect { it.shortDescription }.unique(false).join("\n"))
                manager.addShortText(params.GIT_BRANCH)
            }
        }
        unsuccessful {
            step([$class                  : 'Mailer',
                  notifyEveryUnstableBuild: true,
                  recipients              : 'team04@carbyne911.com',
                  sendToIndividuals       : true
            ])
        }
        fixed {
            step([$class                  : 'Mailer',
                  notifyEveryUnstableBuild: true,
                  recipients              : 'team04f@carbyne911.com',
                  sendToIndividuals       : true
            ])
        }
    }
}
